#!/bin/bash
# Ambient Watcher プロジェクト設定初期化スクリプト

# カラーコード
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}==================================${NC}"
echo -e "${BLUE} Ambient Watcher 設定初期化${NC}"
echo -e "${BLUE}==================================${NC}"
echo ""

# プロジェクトルートを確認
if [ ! -d ".git" ]; then
    echo -e "${YELLOW}警告: 現在のディレクトリはGitリポジトリのルートではないようです。${NC}"
    read -p "続行しますか？ (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# .ambient_watcherディレクトリの作成
if [ -d ".ambient_watcher" ]; then
    echo -e "${YELLOW}.ambient_watcherディレクトリは既に存在します。${NC}"
    read -p "上書きしますか？ (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo "設定ファイルを作成しています..."
mkdir -p .ambient_watcher/prompts

# config.tomlの作成
cat > .ambient_watcher/config.toml << 'EOF'
# Ambient Watcher プロジェクト設定
# このファイルでレビューの内容や観点をカスタマイズできます

# レビュー全体の有効/無効
enabled = true

# 除外パターン（これらのファイルはレビューされません）
exclude_patterns = [
    "target/**",
    "node_modules/**",
    ".git/**",
    "dist/**",
    "build/**",
    "*.min.js",
    "*.min.css",
    "vendor/**",
]

# ============================================
# レビュー設定
# ============================================

# 構文エラー・型エラーチェック
[[reviews]]
name = "構文エラー・型エラーチェック"
description = "コードの構文エラーと型の不一致を検出"
file_patterns = ["*.rs", "*.ts", "*.tsx", "*.js", "*.jsx", "*.py", "*.go"]
priority = 200
enabled = true
prompt = """
あなたはコードレビューアシスタントです。`{file_path}`を分析して、以下を日本語で報告してください：

1. 構文エラーの可能性がある箇所（未定義変数、括弧の不一致、セミコロン忘れなど）
2. 型の不一致の可能性
3. エラーがある場合は`{file_path}:行番号`の形式でリンクを提供

エラーがない場合は『構文エラーは見つかりませんでした』と答えてください。
"""

# セキュリティリスク検出
[[reviews]]
name = "セキュリティリスク検出"
description = "セキュリティ脆弱性とハードコードされた秘密情報を検出"
file_patterns = ["*"]
priority = 150
enabled = true
prompt = """
あなたはセキュリティエキスパートです。`{file_path}`を分析して、以下のセキュリティリスクを日本語で報告してください：

1. ハードコードされたAPIキー、パスワード、トークン
2. SQLインジェクション、XSSの脆弱性
3. 安全でない入力検証
4. エラー箇所は`{file_path}:行番号`形式で

リスクがない場合は『セキュリティリスクは見つかりませんでした』と答えてください。
"""

# パフォーマンス最適化
[[reviews]]
name = "パフォーマンス最適化"
description = "パフォーマンス問題と最適化の機会を検出"
file_patterns = ["*.rs", "*.go", "*.cpp", "*.c", "*.py"]
priority = 100
enabled = true
prompt = """
あなたはパフォーマンスエキスパートです。`{file_path}`を分析して、以下のパフォーマンス問題を日本語で報告してください：

1. O(n²)以上の計算量の処理
2. 不要なループやメモリリーク
3. より効率的な実装方法の提案
4. 問題箇所は`{file_path}:行番号`形式で

問題がない場合は『パフォーマンス問題は見つかりませんでした』と答えてください。
"""

# ============================================
# カスタムレビューの例（無効化されています）
# ============================================

# [[reviews]]
# name = "プロジェクト規約チェック"
# description = "プロジェクト固有のコーディング規約を確認"
# file_patterns = ["src/**/*.rs"]
# priority = 300
# enabled = false
# prompt = """
# このプロジェクトのコーディング規約に従ってレビューしてください：
# 1. 関数は30行以内
# 2. ネストは3段階まで
# 3. エラー処理は必ずResult型を使用
# """

# ============================================
# カスタムプロンプト（別ファイルから読み込む場合）
# ============================================

# [[custom_prompts]]
# id = "architecture_review"
# content = """
# アーキテクチャレビューのプロンプト...
# """
EOF

# READMEの作成
cat > .ambient_watcher/README.md << 'EOF'
# Ambient Watcher プロジェクト設定

このディレクトリには、Ambient Watcherのプロジェクト固有の設定が含まれています。

## 🚀 クイックスタート

```bash
# Ambient Watcherを起動
ambient

# ブラウザも自動で開く
ambient --open
```

## 📁 ファイル構成

```
.ambient_watcher/
├── config.toml      # メイン設定ファイル
├── prompts/         # カスタムプロンプトファイル（オプション）
└── README.md        # このファイル
```

## ⚙️ 設定のカスタマイズ

### レビューの追加

`config.toml`に新しいレビューセクションを追加：

```toml
[[reviews]]
name = "カスタムレビュー"
description = "独自のレビュー観点"
file_patterns = ["src/**/*.rs"]
priority = 300  # 高いほど優先
enabled = true
prompt = """
ここにレビューのプロンプトを記述
{file_path}は自動的にファイルパスに置換されます
"""
```

### 除外パターンの設定

特定のファイルやディレクトリを除外：

```toml
exclude_patterns = [
    "target/**",
    "tests/**",
    "*.generated.rs"
]
```

### レビューの優先順位

- `priority`値が高いレビューから順に実行されます
- デフォルト値は100
- 推奨値：
  - 300+: 最重要（ビルドエラーなど）
  - 200: 重要（構文エラー）
  - 150: 中程度（セキュリティ）
  - 100: 通常（最適化提案）
  - 50以下: 低優先度

## 🎯 ファイルパターン

以下のパターンが使用できます：

- `*.rs` - 拡張子による指定
- `src/**/*.rs` - ディレクトリ配下の全ファイル
- `*` - すべてのファイル
- `!test_*.rs` - 除外パターン（exclude_patternsで使用）

## 💡 Tips

1. **特定のレビューを無効化**: `enabled = false`を設定
2. **プロジェクト全体を無効化**: トップレベルの`enabled = false`
3. **長いプロンプト**: `prompts/`ディレクトリに別ファイルとして保存可能

## 🔧 トラブルシューティング

- 設定が反映されない場合は、Ambient Watcherを再起動してください
- 構文エラーがある場合は、`ambient`コマンド実行時にエラーが表示されます
EOF

# .gitignoreへの追加を提案
if [ -f .gitignore ]; then
    if ! grep -q ".ambient_watcher/cache" .gitignore 2>/dev/null; then
        echo -e "${YELLOW}.gitignoreに以下を追加することをお勧めします：${NC}"
        echo ".ambient_watcher/cache/"
        echo ".ambient_watcher/*.log"
    fi
fi

echo ""
echo -e "${GREEN}✅ 設定ファイルを作成しました！${NC}"
echo ""
echo "作成されたファイル："
echo "  - .ambient_watcher/config.toml (設定ファイル)"
echo "  - .ambient_watcher/README.md (ドキュメント)"
echo ""
echo -e "${BLUE}次のステップ：${NC}"
echo "1. .ambient_watcher/config.toml を編集してレビュー設定をカスタマイズ"
echo "2. ambient コマンドでAmbient Watcherを起動"
echo ""